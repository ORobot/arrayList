!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
__ARRAYLIST__	arrayList.hpp	2;"	d
__LINEARLIST__	linearList.hpp	2;"	d
arrayLength	arrayList.hpp	/^	int arrayLength;$/;"	m	class:arrayList
arrayList	arrayList.hpp	/^arrayList<T>::arrayList(const arrayList<T>& other)$/;"	f	class:arrayList
arrayList	arrayList.hpp	/^arrayList<T>::arrayList(int initialCapacity)$/;"	f	class:arrayList
arrayList	arrayList.hpp	/^class arrayList : public linearList<T>$/;"	c
capacity	arrayList.hpp	/^	int capacity() const { return arrayLength; }$/;"	f	class:arrayList
changeLength1D	arrayList.hpp	/^void arrayList<T>::changeLength1D()$/;"	f	class:arrayList
checkIndex	arrayList.hpp	/^int arrayList<T>::checkIndex(int theIndex) const$/;"	f	class:arrayList
clear	arrayList.hpp	/^void arrayList<T>::clear()$/;"	f	class:arrayList
element	arrayList.hpp	/^	T* element;$/;"	m	class:arrayList
empty	arrayList.hpp	/^  bool empty() const { return listSize == 0; }  \/\/为空返回真, 否则为假$/;"	f	class:arrayList
erase	arrayList.hpp	/^void arrayList<T>::erase(int theIndex)$/;"	f	class:arrayList
get	arrayList.hpp	/^T& arrayList<T>::get(int theIndex) const$/;"	f	class:arrayList
illegalIndex	arrayList.hpp	/^			illegalIndex(const std::string s) { std::cout << s << std::endl; }$/;"	f	class:arrayList::illegalIndex
illegalIndex	arrayList.hpp	/^	class illegalIndex$/;"	c	class:arrayList
illegalParameterValue	arrayList.hpp	/^			illegalParameterValue(const std::string s) { std::cout << s << std::endl; }$/;"	f	class:arrayList::illegalParameterValue
illegalParameterValue	arrayList.hpp	/^	class illegalParameterValue$/;"	c	class:arrayList
indexOf	arrayList.hpp	/^int arrayList<T>::indexOf(const T& theElement) const$/;"	f	class:arrayList
insert	arrayList.hpp	/^void arrayList<T>::insert(int theIndex, const T& theElement)$/;"	f	class:arrayList
lastIndexOf	arrayList.hpp	/^int arrayList<T>::lastIndexOf(const T& theElement) const$/;"	f	class:arrayList
linearList	linearList.hpp	/^class linearList {$/;"	c
listSize	arrayList.hpp	/^	int listSize;$/;"	m	class:arrayList
main	main.cpp	/^int main()$/;"	f
operator !=	arrayList.hpp	/^bool arrayList<T>::operator!=(const arrayList<T>& rhl) const$/;"	f	class:arrayList
operator ==	arrayList.hpp	/^bool arrayList<T>::operator==(const arrayList<T>& rhl) const$/;"	f	class:arrayList
operator []	arrayList.hpp	/^T& arrayList<T>::operator[](int theIndex)$/;"	f	class:arrayList
output	arrayList.hpp	/^void arrayList<T>::output(std::ostream& os) const$/;"	f	class:arrayList
pop_back	arrayList.hpp	/^T arrayList<T>::pop_back()$/;"	f	class:arrayList
push_back	arrayList.hpp	/^void arrayList<T>::push_back(const T& theElement)$/;"	f	class:arrayList
removeRange	arrayList.hpp	/^void arrayList<T>::removeRange(int startIndex, int endIndex)$/;"	f	class:arrayList
set	arrayList.hpp	/^T arrayList<T>::set(int theIndex, const T& theElement)$/;"	f	class:arrayList
size	arrayList.hpp	/^  int size() const { return listSize; }					\/\/返回数组的大小$/;"	f	class:arrayList
~arrayList	arrayList.hpp	/^  ~arrayList() { delete[] element; }$/;"	f	class:arrayList
~illegalIndex	arrayList.hpp	/^			~illegalIndex() {}$/;"	f	class:arrayList::illegalIndex
~illegalParameterValue	arrayList.hpp	/^			~illegalParameterValue() {}$/;"	f	class:arrayList::illegalParameterValue
~linearList	linearList.hpp	/^  virtual ~linearList() {};$/;"	f	class:linearList
